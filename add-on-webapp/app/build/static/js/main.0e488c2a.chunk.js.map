{"version":3,"sources":["types/index.tsx","components/ui/subComponents/Alert.component.tsx","constants/index.js","utils/colors.js","utils/styles.tsx","hooks/index.tsx","components/ui/subComponents/AlertActions.component.tsx","utils/index.tsx","utils/endpoints.tsx","components/ui/subComponents/Expander.component.tsx","components/ui/subComponents/Menu.component.tsx","components/ui/subComponents/ExpanderCell.component.tsx","components/ui/subComponents/ColumnTitle.component.tsx","components/ui/subComponents/Cell.component.tsx","components/ui/ExtraColumns.tsx","reducers/fetch/index.tsx","reducers/import/index.tsx","reducers/filters/index.tsx","reducers/select/index.tsx","reducers/expand/index.tsx","components/ui/subComponents/Loader.component.tsx","components/ui/subComponents/Pagination.component.tsx","components/ui/subComponents/CustomNoData.component.tsx","components/ui/subComponents/TableBody.component.tsx","components/ui/subComponents/CustomComponents.components.tsx","components/ui/TableHeader.component.tsx","components/ui/Table.component.tsx","components/ui/subComponents/FilterDialog.component.tsx","components/App.component.tsx","index.tsx"],"names":["FilterTypes","FilterActions","SelectActions","ExpandActions","messagesView","messages","subTitle","length","MessagesWrapper","List","map","warning","Text","key","title","warnings","errors","importStep","Wrapper","data-testid","styled","li","Header","div","ul","imported","collapse","search","expanderText","containerExpander","iconExpand","iconExpandWrapper","expandCell","tableCell","countChildren","cellMenu","menuButton","highestTreeLevel","colors","yellow","black","blackOpacityBorder","blackOpacity","white","darkGrey","grey","greyOpacity","silver","blue","orange","columnHeader","color","textTransform","fontWeight","textAlign","fontSize","boxShadow","backgroundColor","paddingLeft","buttonStyle","disabled","opacity","width","height","noOverflow","overflow","noBorder","border","arrowStyle","marginTop","foldIcon","alertIcons","isHovered","paginationButton","marginLeft","padding","resizerStyle","right","useHover","children","useState","value","setValue","ref","useRef","handleMouseEnter","handleMouseLeave","eventOne","eventTwo","useEffect","node","current","addEventListener","removeEventListener","copiedAlertContent","a","feedbackMessage","join","copy","then","notify","undefined","type","toast","TYPE","SUCCESS","position","POSITION","TOP_RIGHT","autoClose","ERROR","closeToast","hoverRefCopy","isHoveredCopy","hoverRef","IconWrapper","onClick","style","message","options","getUrlDecodedConfigurationId","name","replace","results","RegExp","exec","window","location","hash","decodeURIComponent","cloning","item","level","others","headerContent","countAllChildren","uniqId","count","allData","selectedIds","parentId","forEach","child","includes","hasElementOverflown","element","scrollHeight","clientHeight","scrollWidth","clientWidth","manipulateStringValuesToBooleans","values","hasChildren","isImported","getChildren","original","global","fetch","configurationId","method","headers","body","JSON","stringify","commonParameters","parameters","handleFetchResponse","Promise","all","index","updatedItemWithLevelAndTreeNode","treeNodeId","uri","err","updateTreeDataWithAllChildren","dataToChange","parentLevel","prop","Object","reduce","result","valueHasTreeNode","id","treeNode","substring","lastIndexOf","startsWith","updateHeight","pagination","configId","tableBody","document","getElementById","customId","parent","postMessage","messageType","response","ok","json","reject","handleFetchError","errorOrResponse","errorCallback","responseCallback","Response","isExpanded","origin","fetchChildren","useDispatch","ExpanderContainer","constants","Icon","anchorEl","closeMenu","menuItems","disableAutoFocusItem","open","Boolean","onClose","action","MenuItem","e","stopPropagation","borderBottom","MenuItemText","span","column","checkWidth","offsetWidth","textValue","dispatchSelect","dispatchExpand","startImport","setAnchorEl","expandAll","payload","selectAll","unselectAll","data-tip","checkChildren","AmountChildren","Fab","aria-controls","aria-haspopup","currentTarget","p","theme","columnProps","useGlobal","columns","setColumns","setFoldedColumn","defaultWidths","sorted","hoverRefText","isHoveredText","sortedColumn","checkId","folded","setFolded","configColumn","setConfigColumn","foldedColumn","find","Container","FoldWrapper","foldedId","foldedColumnsConfig","defaultWidth","sortable","resizable","Expander","FoldedCell","Cell","TitleWrapper","sort","Title","SortDirection","desc","calcColumns","filter","show","expander","filterable","accessor","headerStyle","props","display","minWidth","minResizeWidth","collapseColumn","label","addReducer","dispatch","loading","filterParameters","filters","rootFilters","visualizationMetadata","loadingRoots","hasEmptyRootsFilters","toggleColumnsConfig","variable","query","text","literal","enablePagination","subtitle","data","error","Error","notImporting","updatedvalues","uuid","parentUuid","produce","draftState","importValues","successSteps","roots","importSteps","closeButton","resetExpandedStateForRoots","obj","clearActive","setActive","close","picklistValues","isFilterDialogOpen","areFiltersActive","expandedRows","entries","areFilterValuesFilledIn","every","x","loadingPicklist","queryId","picklist","b","itemA","itemB","updatedData","_union","getTreeLevel","calcExpanded","expandedState","Number","handleExpand","resetExpand","updatedExpandedRows","newExpanded","expandedTreeLevel","keys","LoaderContainer","size","margin","defaultButton","showPageSizeOptions","pageSizeOptions","pageSize","canPrevious","canNextFromData","onPageSizeChange","className","onPageChange","PreviousComponent","NextComponent","changePage","page","isNaN","Math","min","max","pages","getSafePage","canNext","startAmount","showAmount","total","classnames","borderRadius","borderTop","WrapperPageSize","PageSizeOptions","TextPageSize","FormControl","Select","onChange","target","input","InputBase","paddingTop","option","TextTotalRoots","CustomNoDataComponent","isLoading","TableBody","isRoot","setDefaultWidths","setSortedColumn","setSelectedIds","tableBodyId","newColumns","setNewColumns","resize","setResize","checking","setChecking","pageChanged","setPageChanged","windowSize","setWindowSize","useLayoutEffect","updateSize","innerWidth","innerHeight","useWindowSize","defaultColumnWidths","headerId","defaultColumn","getBoundingClientRect","concat","set","assign","get","Map","ReactTooltip","rebuild","root","multiline","overridePosition","currentEvent","left","top","d","documentElement","defaultPageSize","getTbodyProps","maxHeight","minHeight","overflowX","TheadComponent","showPagination","getNoDataProps","PaginationComponent","Pagination","collapseOnDataChange","collapseOnSortingChange","multiSort","SubComponent","NoDataComponent","minRows","getResizerProps","getTrProps","state","rowInfo","checkClickedRow","some","cursor","borderLeft","getTheadThProps","getTheadTrProps","paddingRight","getTdProps","columnId","handleOriginal","hasExpandIconClicked","cellProps","getTableProps","getProps","getTrGroupProps","expanderDefaults","resized","rest","onResizedChange","newResized","event","expanded","onSortedChange","newSorted","onExpandedChange","classes","makeStyles","backdrop","zIndex","drawer","alignItems","marginRight","listbox","paper","TextField","required","InputProps","defaultValue","fullWidth","autoFocus","onBlur","variant","onKeyPress","Autocomplete","onOpen","_noop","noOptionsText","setOpen","getOptionLabel","renderOption","renderInput","params","endAdornment","Fragment","CircularProgress","Button","form","IconButton","customStyle","hasSelectedIds","LeftContainer","Subtitle","Backdrop","RightContainer","IconButtonWrapper","header","h3","success","successMessage","WARNING","css","background","trim","toLowerCase","importAlerts","rowData","initialData","React","useMemo","updatedFilterValues","setUpdatedFilterValues","handleSubmit","preventDefault","Dialog","DialogTitle","DialogContent","overflowY","DialogForm","onSubmit","pickedFilterQuery","queryFilter","DialogActions","justifyContent","paddingBottom","fetchRoots","setConfigurationId","setParameters","areParamsAvailable","href","decodedParameters","atob","parse","hideProgressBar","draggable","pauseOnHover","pauseOnFocusLoss","TOP_LEFT","closeOnClick","bodyClassName","defaultInitialState","setGlobal","ReactDOM","render","CssBaseline"],"mappings":"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","file":"static/js/main.0e488c2a.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  PageChangeFunction,\n  ReactTableFunction,\n  Column,\n  RowInfo\n} from 'react-table';\n\n// TODO: remove the null value -> use undefined instead (only use null for returning stuff of the API)\n\nexport interface IImport {\n  success: boolean;\n  warnings: string[];\n  successMessage: string;\n  importStep: string | undefined;\n  errors: string[];\n}\n\n// type for properties of original (comes from row information)\nexport interface IOriginalProps {\n  original: IRowProps;\n}\n\n// interface for row properties\nexport interface IRowProps {\n  hasChildren: boolean;\n  name?: string;\n  type?: string;\n  uri: string;\n  usedConfig?: number;\n  isImported: boolean;\n  children: string[];\n  isExpanded?: boolean;\n  level: number;\n  treeNodeId: string;\n  uuid: string;\n  uniqId: string;\n  [key: string]: any;\n}\n\n// interface for column properties\nexport interface IColumnProps {\n  columns?: Column[];\n  expander?: boolean;\n  Header?: string | ((original: any) => JSX.Element);\n  accessor?: string;\n  show?: boolean;\n  headerStyle?: object;\n  width?: number;\n  sortable?: boolean;\n  filterable?: boolean;\n  resizable?: boolean;\n  display?: string;\n  name?: string;\n  id?: string;\n  style?: object;\n  getProps?: ReactTableFunction;\n  minWidth?: number;\n  minResizeWidth?: number;\n  maxWidth?: number;\n  Expander?(original: IOriginalProps): JSX.Element | string;\n  Cell?({ original }: IOriginalProps): JSX.Element | string;\n}\n\nexport type mouseEvent = React.MouseEvent<HTMLButtonElement>;\n\nexport interface ICACProps {\n  readonly uniqId: string;\n  count: number;\n  readonly allData: {\n    [key: string]: any;\n  };\n  readonly selectedIds: string[];\n  readonly parentId: string;\n}\n\nexport interface IPagination {\n  showPageSizeOptions: boolean;\n  pageSizeOptions: number[];\n  data: { [key: string]: any }[];\n  canPrevious: boolean;\n  canNextFromData: any;\n  className: string;\n  onPageChange: PageChangeFunction;\n  style: { [key: string]: any };\n  PreviousComponent: React.ReactType;\n  NextComponent: React.ReactType;\n  onPageSizeChange(newPageSize: number): void;\n  [key: string]: any;\n}\n\nexport interface ITableColumn {\n  name: string | null;\n  display: string | null;\n  show: boolean;\n}\n\nexport interface IResponseRoots {\n  columns: ITableColumn[];\n  values: any[];\n  visualizationMetadata: {\n    enablePagination: boolean;\n    title: string;\n    subtitle?: string;\n  };\n  filters: {\n    name: string;\n    type: FilterTypes.picklist | FilterTypes.text;\n    variable: string;\n    query: string | null;\n  }[];\n}\n\nexport interface FilterParameters {\n  name: string;\n  id: string;\n  type: FilterTypes.literal | FilterTypes.uri;\n  value?: string;\n  query: string;\n}\n\nexport enum FilterTypes {\n  text = 'Text',\n  picklist = 'SPARQL Picklist',\n  literal = 'literal',\n  uri = 'uri'\n}\n\n// Actions\n\nexport enum FilterActions {\n  open = 'OPEN_FILTER_DIALOG',\n  close = 'CLOSE_FILTER_DIALOG',\n  picklistValues = 'FETCH_PICKLIST_VALUES',\n  setActive = 'SET_ACTIVE_FILTERS',\n  clearActive = 'CLEAR_ACTIVE_FILTERS'\n}\n\nexport type FilterActionsTypes =\n  | {\n      type:\n        | FilterActions.clearActive\n        | FilterActions.open\n        | FilterActions.close;\n    }\n  | { type: FilterActions.picklistValues; payload: { queryId: string } }\n  | {\n      type: FilterActions.setActive;\n      payload: {\n        [key: string]: FilterParameters['value'];\n      };\n    };\n\nexport enum SelectActions {\n  selectAll = 'SELECT_ALL',\n  unselectAll = 'UNSELECT_ALL'\n}\n\nexport type SelectActionsTypes = {\n  type: SelectActions;\n  payload: { item: IRowProps };\n};\n\nexport type ExpandActionsTypes =\n  | {\n      type: ExpandActions.resetExpand;\n    }\n  | {\n      type: ExpandActions.handleExpand;\n      payload: { newExpanded: any; treeNode: string; index: number };\n    }\n  | {\n      type: ExpandActions.expandAll;\n      payload: { item: IRowProps };\n    };\n\nexport enum ExpandActions {\n  handleExpand = 'HANDLE_EXPAND',\n  resetExpand = 'RESET_EXPAND',\n  expandAll = 'HANDLE_ALL_CHILDREN'\n}\n\nexport type CellProps = {\n  original: IRowProps;\n} & Omit<RowInfo, 'original'>;\n","import React from 'reactn';\nimport styled from 'styled-components';\n\nconst messagesView = ({\n  messages,\n  subTitle\n}: {\n  messages?: string[];\n  subTitle: string;\n}) =>\n  messages &&\n  messages.length > 0 && (\n    <MessagesWrapper>\n      <span>{subTitle}</span>\n      <List>\n        {messages.map(warning => (\n          <Text key={warning}>{warning}</Text>\n        ))}\n      </List>\n    </MessagesWrapper>\n  );\n\n// This is the component of the alert message\nexport default ({\n  title,\n  warnings,\n  errors,\n  importStep\n}: {\n  title: string;\n  warnings?: string[];\n  errors?: string[];\n  importStep?: string;\n}) => (\n  <Wrapper data-testid=\"Import\">\n    <Header>\n      <span>{importStep}</span>\n      <span>{title}</span>\n    </Header>\n\n    {messagesView({ messages: warnings, subTitle: 'Warnings: ' })}\n    {messagesView({ messages: errors, subTitle: 'Errors: ' })}\n  </Wrapper>\n);\n\nconst Text = styled.li`\n  display: list-item;\n  padding-bottom: 5px;\n`;\n\nconst Header = styled.div`\n  font-size: medium;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Wrapper = styled.div`\n  font-size: small;\n`;\n\nconst MessagesWrapper = styled.div`\n  padding: 5px;\n  user-select: all;\n`;\n\nconst List = styled.ul`\n  margin: 0;\n  padding-inline-start: 15px;\n`;\n","// These are constants that can be used everywhere in the frontend -> so there only needs to be a change in here\nexport default {\n  imported: 'imported',\n  collapse: 'collapse',\n  search: 'Search',\n  expanderText: 'ExpanderText',\n  containerExpander: 'ContainerExpander',\n  iconExpand: 'IconExpand',\n  iconExpandWrapper: 'IconExpandWrapper',\n  expandCell: 'ExpandCell',\n  tableCell: 'TableCell',\n  countChildren: 'CountChildren',\n  cellMenu: 'CellMenu',\n  menuButton: 'MenuButton',\n  highestTreeLevel: 'Root'\n};\n","// helper object for the colors\nexport const colors = {\n  yellow: 'rgb(246, 229, 36)',\n  black: 'rgb(76, 76, 76)',\n  blackOpacityBorder: 'rgb(76, 76, 76, 0.3)',\n  blackOpacity: 'rgb(76, 76, 76, 0.75)',\n  white: 'rgb(255, 255, 255)',\n  darkGrey: 'rgb(105, 105, 105)',\n  grey: 'rgb(211, 211, 211)',\n  greyOpacity: 'rgb(211, 211, 211, 0.3)',\n  silver: 'rgb(192, 192, 192)',\n  blue: 'rgb(33, 150, 243)',\n  orange: 'rgb(255,165,0)'\n};\n","import constants from '../constants';\nimport { colors } from './colors';\n\nconst borderProp = 'solid 1px rgba(0,0,0,0.05)';\n\n// helper object for the style of column header\nexport const columnHeader = {\n  color: colors.white,\n  textTransform: 'capitalize',\n  fontWeight: 'bold',\n  textAlign: 'left',\n  fontSize: 'medium',\n  boxShadow: 'unset',\n  backgroundColor: colors.darkGrey,\n  paddingLeft: 'unset'\n};\n\n// helper function for the style of clicked table row\nexport const tableRow = (checkClickedRow: boolean) => ({\n  color: colors.black,\n  cursor: 'pointer',\n  borderLeft: borderProp,\n  ...(checkClickedRow\n    ? { fontWeight: 'bold', backgroundColor: colors.silver }\n    : {})\n});\n\n// helper object for the style of table cells\nexport const tableCells = (columnId: string | number) => ({\n  textAlign: 'left',\n  border: borderProp,\n  borderLeft: '0',\n  ...(columnId === constants.collapse ? { padding: '0px' } : {})\n});\n\n// helper object for the style of button\nexport const buttonStyle = (disabled: boolean) => ({\n  color: colors.blackOpacity,\n  opacity: disabled ? 0.5 : 1,\n  width: '52.8px',\n  height: '45.8px'\n});\n\n// helper object for the style of icon\nexport const iconStyle = {\n  marginLeft: 10\n};\n\n// helper object for the style of paper\nexport const paperStyle = {\n  padding: '2px 4px',\n  display: 'flex',\n  alignItems: 'center',\n  width: 300,\n  marginTop: 5,\n  marginLeft: 5,\n  height: 33\n};\n\n// helper object for having no default overflow\nexport const noOverflow = {\n  overflow: 'unset'\n};\n\n// helper object for having no default border\nexport const noBorder = {\n  border: 0\n};\n\n// helper object for the style of the sort direction\nexport const arrowStyle = {\n  marginTop: '3px'\n};\n\n// helper object for the style of the fold direction\nexport const foldIcon = {\n  fontSize: 'x-large'\n};\n\n// helper function for the style of the action buttons in the alerts\nexport const alertIcons = (isHovered: boolean) => ({\n  color: colors.white,\n  fontSize: isHovered ? '20px' : 'medium'\n});\n\n// helper function for the style of the pagination buttons\nexport const paginationButton = (disabled: boolean) => ({\n  marginLeft: '10px',\n  width: '30px',\n  height: '30px',\n  opacity: disabled ? '1' : '0.3',\n  color: colors.blackOpacity,\n  padding: 'unset'\n});\n\n// helper object for the style of the resize icon in the column headers\nexport const resizerStyle = { width: '20px', right: '-10px' };\n","import React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\n\n// Hook for knowing when you hover over element\nexport const useHover = (\n  children?: boolean\n): [React.RefObject<HTMLDivElement>, boolean] => {\n  const [value, setValue] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const handleMouseEnter = () => setValue(true);\n  const handleMouseLeave = () => setValue(false);\n\n  const eventOne = children ? 'mouseenter' : 'mouseover';\n  const eventTwo = children ? 'mouseleave' : 'mouseout';\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      node.addEventListener(eventOne, handleMouseEnter);\n      node.addEventListener(eventTwo, handleMouseLeave);\n\n      return () => {\n        node.removeEventListener(eventOne, handleMouseEnter);\n        node.removeEventListener(eventTwo, handleMouseLeave);\n      };\n    }\n  }, [ref.current]); // Recall only if ref changes\n\n  return [ref, value];\n};\n\n// Hook for getting the window size\nexport const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState([0, 0]);\n  useLayoutEffect(() => {\n    const updateSize = () => {\n      setWindowSize([window.innerWidth, window.innerHeight]);\n    };\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  return windowSize;\n};\n","import React from 'reactn';\nimport styled from 'styled-components';\nimport copy from 'clipboard-copy';\nimport { toast } from 'react-toastify';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Clear from '@material-ui/icons/Clear';\n\nimport { notify } from '../../../utils';\nimport { alertIcons } from '../../../utils/styles';\nimport { useHover } from '../../../hooks';\n\n/**\n * Copies the content of the import messages.\n * Makes it easier to track in case of failure and the user can mail the admin with the necessary info.\n */\n\nconst copiedAlertContent = async ({\n  errors,\n  warnings\n}: {\n  errors: string[];\n  warnings: string[];\n}) => {\n  const feedbackMessage =\n    errors.length > 0\n      ? `Errors:\n${errors.join('\\n')} \n      \\nWarnings:\n${warnings.join('\\n')}`\n      : `Warnings:\n${warnings.join('\\n')}`;\n\n  return copy(feedbackMessage)\n    .then(() =>\n      notify('Copied to clipboard!', undefined, {\n        type: toast.TYPE.SUCCESS,\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 3000\n      })\n    )\n    .catch(() =>\n      notify(\n        'Copied failed, try again or manually copy the text by clicking on it',\n        undefined,\n        {\n          type: toast.TYPE.ERROR,\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 3000\n        }\n      )\n    );\n};\n\n// This is the component for the alert actions\nexport default ({\n  closeToast,\n  warnings,\n  errors\n}: {\n  closeToast?: () => void;\n  warnings?: string[];\n  errors?: string[];\n}) => {\n  const [hoverRefCopy, isHoveredCopy] = useHover();\n  const [hoverRef, isHovered] = useHover();\n\n  return (\n    <>\n      {((errors && warnings) || warnings) && (\n        <IconWrapper\n          data-testid=\"CopyToClipBoard\"\n          ref={hoverRefCopy}\n          onClick={async () =>\n            copiedAlertContent({ errors: errors || [], warnings })\n          }\n        >\n          <FileCopy style={alertIcons(isHoveredCopy)} />\n        </IconWrapper>\n      )}\n      <IconWrapper ref={hoverRef} onClick={closeToast}>\n        <Clear style={alertIcons(isHovered)} data-testid=\"CloseToast\" />\n      </IconWrapper>\n    </>\n  );\n};\n\nconst IconWrapper = styled.div`\n  width: 30px;\n  height: 30px;\n`;\n","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { css } from 'glamor';\n\nimport Alert from '../components/ui/subComponents/Alert.component';\nimport AlertActions from '../components/ui/subComponents/AlertActions.component';\n\nimport {\n  IImport,\n  IRowProps,\n  ICACProps,\n  FilterTypes,\n  IResponseRoots\n} from '../types';\nimport { colors } from './colors';\nimport { State } from 'reactn/default';\nimport { baseUrlVisualization } from './endpoints';\nimport prop from 'lodash/fp/prop';\n\n// This function is for showing alerts in the app with the right information\nexport const notify = (\n  message: string,\n  importStep?: string,\n  options?: object | undefined,\n  warnings?: string[],\n  errors?: string[]\n) =>\n  toast(\n    <Alert\n      title={message}\n      warnings={warnings}\n      errors={errors}\n      importStep={importStep}\n    />,\n    options || {\n      type: toast.TYPE.ERROR\n    }\n  );\n\n// This function is for showing the response of the import alerts, based on its props, it shows if it was successfull or not\nexport const importAlerts = (importSteps: IImport[]) => {\n  importSteps.forEach(\n    ({ success, warnings, successMessage, importStep, errors }) => {\n      // successfull step\n      if (success && warnings.length === 0) {\n        notify(successMessage, importStep, {\n          type: toast.TYPE.SUCCESS,\n          autoClose: 4000\n        });\n      }\n\n      // successfull step with warnings\n      if (success && warnings.length > 0) {\n        notify(\n          successMessage,\n          importStep,\n          {\n            type: toast.TYPE.WARNING,\n            autoClose: false,\n            closeButton: <AlertActions warnings={warnings} />,\n            className: css({ background: `${colors.orange} !important` })\n          },\n          warnings\n        );\n      }\n\n      // unsuccessfull step with errors\n      if (!success && (errors.length > 0 || warnings.length > 0)) {\n        // In case of simple feedback there will only be one error message\n        if (\n          errors.length === 1 &&\n          warnings.length === 0 &&\n          errors[0].trim().toLowerCase() ===\n            'error in import. contact your administrator'\n        ) {\n          notify(errors[0], importStep, {\n            type: toast.TYPE.ERROR,\n            autoClose: false,\n            closeButton: <AlertActions warnings={warnings} errors={errors} />\n          });\n        } else {\n          notify(\n            'This step has failed',\n            importStep,\n            {\n              type: toast.TYPE.ERROR,\n              autoClose: false,\n              closeButton: <AlertActions warnings={warnings} errors={errors} />\n            },\n            warnings || undefined,\n            errors || undefined\n          );\n        }\n      }\n    }\n  );\n};\n\nexport const getUrlDecodedConfigurationId = (name: string) => {\n  name = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  const regex = new RegExp('[\\\\?&#]' + name + '=([^&#]*)');\n  const results = regex.exec(window.location.search || window.location.hash);\n  return results === null\n    ? ''\n    : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\n\nexport const cloning = (item: IRowProps) =>\n  (({ level, children, ...others }) => ({ ...others }))(item); // remove level and children array\n\nexport const headerContent = {\n  'Content-Type': 'application/json'\n};\n\n// This function is for calculating how many children there are selected, it also counts the children of different levels deep\nexport const countAllChildren = ({\n  uniqId,\n  count,\n  allData,\n  selectedIds,\n  parentId\n}: ICACProps) => {\n  const children = allData[uniqId].children;\n  if (children.length > 0) {\n    children.forEach((child: string) => {\n      count = countAllChildren({\n        uniqId: child,\n        count,\n        allData,\n        selectedIds,\n        parentId\n      });\n      return count;\n    });\n  }\n\n  return selectedIds.includes(uniqId) && uniqId !== parentId\n    ? (count += 1)\n    : count;\n};\n\nexport const hasElementOverflown = (element?: HTMLElement) => {\n  if (!element) {\n    return false;\n  }\n  return (\n    element.scrollHeight > element.clientHeight ||\n    element.scrollWidth > element.clientWidth\n  );\n};\n\nexport const isFilterTypeText = (type: FilterTypes) =>\n  type === FilterTypes.text;\n\nexport const manipulateStringValuesToBooleans = (\n  values: IResponseRoots['values']\n) =>\n  values.map(item => ({\n    ...item,\n    hasChildren: ['1', 'true'].includes(item.hasChildren),\n    isImported: ['1', 'true'].includes(item.isImported)\n  }));\n\n// This function is a recursive one, it fetches the children for the provided root.\n// When 1 of the children has children of itself it is gonna call the function again and so on ...\n// This is necessary for the expand all, select all and import all functionality\n// We are gonna make many different calls to fetch the data\nexport const getChildren = async (\n  original: IRowProps,\n  global: State\n): Promise<IResponseRoots['values']> =>\n  fetch(\n    `${baseUrlVisualization}children?configurationId=${global.configurationId}`,\n    {\n      method: 'post',\n      headers: headerContent,\n      body: JSON.stringify({\n        values: [cloning(original)],\n        commonParameters: global.parameters\n      })\n    }\n  )\n    .then(handleFetchResponse)\n    .then(async ({ values }: { values: IResponseRoots['values'] }) =>\n      Promise.all(\n        manipulateStringValuesToBooleans(values).map(async (item, index) => {\n          const updatedItemWithLevelAndTreeNode = {\n            ...item,\n            level: original.level + 1,\n            treeNodeId: `${original.treeNodeId}.${index + 1}`\n          };\n          return {\n            ...updatedItemWithLevelAndTreeNode,\n            uniqId: `${item.uri}_${original.treeNodeId}.${index + 1}`,\n            children: item.hasChildren\n              ? await getChildren(updatedItemWithLevelAndTreeNode, global)\n              : []\n          };\n        })\n      )\n    )\n    .catch((err: Error | Response) => {\n      notify(\n        'There was a problem retrieving all the children, please try again.',\n        undefined,\n        {\n          type: toast.TYPE.ERROR,\n          autoClose: 5000\n        }\n      );\n      return [];\n    });\n\n// this function is gonna update the data, this data is a normalized list\n// It is also a recursive one for updating the children of children and so on ...\n// This is necessary for the expand all, select all and import all functionality\nexport const updateTreeDataWithAllChildren = (\n  children: IResponseRoots['values'],\n  dataToChange: State['data'],\n  parentLevel: number,\n  parentId?: string\n) => {\n  children.forEach(item => {\n    if (item.children.length > 0) {\n      updateTreeDataWithAllChildren(item.children, dataToChange, item.level);\n    }\n\n    // this is gonna update the children for the provided item in the children array\n    dataToChange[item.uniqId] = {\n      ...item,\n      children: item.children.map(prop('uniqId'))\n    };\n\n    // this is gonna update the children for the parent\n    // It is only gonna execute 1 time\n    if (parentId) {\n      dataToChange[parentId].children = Object.values(children).reduce(\n        (result, { level, uniqId }) => [\n          ...result,\n          ...(level === parentLevel + 1 ? [uniqId] : [])\n        ],\n        []\n      );\n    }\n  });\n  return dataToChange;\n};\n\n// this function is for checking a provided value has the provided treeNode inside of it\n// Is used in filtering the right items during select/unselect all\nexport const valueHasTreeNode = (id: string, treeNode = '') =>\n  id.substring(id.lastIndexOf('_') + 1).startsWith(treeNode);\n\n// Send message to parent window to adjust the iframe's height\nexport const updateHeight = (pagination: boolean, configId: string) => {\n  const tableBody = document.getElementById(customId('TableBody', configId));\n  window.parent.postMessage(\n    JSON.stringify({\n      messageType: customId('resizing', configId),\n      height: tableBody?.scrollHeight,\n      pagination\n    }),\n    '*'\n  );\n};\n\nexport const customId = (id: string, configId: string) =>\n  configId ? `${configId}_${id}` : id;\n\nexport const handleFetchResponse = async (response: Response) => {\n  if (response.ok) {\n    return response.json();\n  }\n  return Promise.reject(response);\n};\n\nexport const handleFetchError = async (\n  errorOrResponse: Response | Error,\n  errorCallback: (error: Error) => void,\n  responseCallback: (message: string) => void\n) => {\n  if (errorOrResponse instanceof Response) {\n    errorOrResponse.json().then((json: any) => {\n      responseCallback(json.message);\n    });\n  } else {\n    errorCallback(errorOrResponse);\n  }\n};\n","// baseURL's\nexport const baseUrlVisualization = '/api/visualization/';\nexport const baseUrlImport = '/api/import/';\nexport const baseUrlFilterValues = '/api/visualization/filtervalues';\n","import { useDispatch } from 'reactn';\nimport React from 'react';\nimport styled from 'styled-components';\nimport Icon from '@material-ui/core/Icon';\n\nimport { IRowProps } from '../../../types';\nimport constants from '../../../constants';\n\n// This is the component of the expander\nexport default ({\n  isExpanded,\n  origin,\n  level\n}: {\n  isExpanded: boolean;\n  origin: IRowProps;\n  level: number;\n}) => {\n  const fetchChildren = useDispatch('fetchChildren'); // calling reducer fetchChildren\n  const name = origin.uri.replace(/.*\\//, '');\n\n  return (\n    <ExpanderContainer\n      onClick={() => {\n        if (origin.children.length === 0) {\n          fetchChildren(true, origin, level);\n        }\n      }}\n      data-testid={`Expand_${name}`}\n      id={constants.iconExpandWrapper}\n    >\n      {isExpanded ? (\n        <Icon\n          id={constants.iconExpand}\n          data-testid={`Down_${name}`}\n          style={{ fontSize: 20 }}\n        >\n          expand_more\n        </Icon>\n      ) : (\n        <Icon\n          id={constants.iconExpand}\n          data-testid={`Right_${name}`}\n          style={{ fontSize: 20 }}\n        >\n          chevron_right\n        </Icon>\n      )}\n    </ExpanderContainer>\n  );\n};\n\nconst ExpanderContainer = styled.div`\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  padding: 1px;\n  margin: auto;\n`;\n","import React from 'reactn';\nimport styled from 'styled-components';\nimport { Menu as MMenu, MenuProps as MMenuProps } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\n\ninterface CustomProps {\n  menuItems: { title: string; action(): void }[];\n  closeMenu(): void;\n}\ntype MenuProps = Pick<MMenuProps, 'anchorEl' | 'id'> & CustomProps;\n\nexport default ({ id, anchorEl, closeMenu, menuItems }: MenuProps) => (\n  <MMenu\n    id={id}\n    anchorEl={anchorEl}\n    disableAutoFocusItem={true}\n    open={Boolean(anchorEl)}\n    onClose={() => {\n      closeMenu();\n    }}\n  >\n    {menuItems.map(({ title, action }, index) => (\n      <MenuItem\n        key={title}\n        id={`MenuItem_${title}`}\n        onClick={e => {\n          e.stopPropagation();\n          closeMenu();\n          action();\n        }}\n        {...(index !== menuItems.length - 1 && {\n          style: {\n            borderBottom: '1px solid rgb(0, 0, 0, 0.10)'\n          }\n        })}\n      >\n        <MenuItemText data-testid={title}>{title}</MenuItemText>\n      </MenuItem>\n    ))}\n  </MMenu>\n);\n\nconst MenuItemText = styled.span`\n  margin-left: 10px;\n`;\n","import React, { useDispatch } from 'reactn';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport Fab from '@material-ui/core/Fab';\nimport MoreVert from '@material-ui/icons/MoreVert';\n\nimport Expander from './Expander.component';\nimport Menu from './Menu.component';\nimport { useHover } from '../../../hooks';\nimport {\n  IRowProps,\n  ITableColumn,\n  SelectActions,\n  ExpandActions\n} from '../../../types';\nimport constants from '../../../constants';\n\nexport default ({\n  original,\n  isExpanded,\n  column,\n  count\n}: {\n  isExpanded: boolean;\n  original: IRowProps;\n  column: ITableColumn;\n  count?: number;\n}) => {\n  const [hoverRef, isHovered] = useHover();\n  const checkWidth =\n    hoverRef.current &&\n    hoverRef.current.offsetWidth < hoverRef.current.scrollWidth;\n  const textValue = column.name && original[column.name];\n  const dispatchSelect = useDispatch('handleSelect');\n  const dispatchExpand = useDispatch('handleExpand');\n  const startImport = useDispatch('import');\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | undefined>(undefined);\n\n  const menuItems = [\n    {\n      title: 'Expand all',\n      action: () => {\n        dispatchExpand({\n          type: ExpandActions.expandAll,\n          payload: { item: original }\n        });\n      }\n    },\n    {\n      title: 'Select all',\n      action: () => {\n        dispatchSelect({\n          type: SelectActions.selectAll,\n          payload: { item: original }\n        });\n      }\n    },\n    {\n      title: 'Unselect all',\n      action: () => {\n        dispatchSelect({\n          type: SelectActions.unselectAll,\n          payload: { item: original }\n        });\n      }\n    },\n    {\n      title: 'Import all',\n      action: async () => {\n        await dispatchSelect({\n          type: SelectActions.selectAll,\n          payload: { item: original }\n        });\n        await startImport(original.treeNodeId);\n      }\n    }\n  ];\n\n  return (\n    <Wrapper\n      level={original.level}\n      {...(original.hasChildren && { id: constants.containerExpander })}\n      data-tip={checkWidth && isHovered ? textValue || '' : ''}\n    >\n      {original.hasChildren ? (\n        <Expander\n          isExpanded={isExpanded}\n          origin={original}\n          level={original.level}\n        />\n      ) : undefined}\n      <Text\n        ref={hoverRef}\n        id={constants.expanderText}\n        checkChildren={original.hasChildren}\n      >\n        {textValue || ''}\n        <AmountChildren\n          data-testid={`AmountChildren_${textValue}`}\n          id={constants.countChildren}\n        >\n          {!isExpanded && original.children.length > 0 && count !== 0\n            ? `  (+${count} children)`\n            : ''}\n        </AmountChildren>\n      </Text>\n      {original.hasChildren ? (\n        <Fab\n          id={constants.menuButton}\n          data-testid={`${original.treeNodeId}_${constants.menuButton}`}\n          aria-controls={constants.cellMenu}\n          style={{\n            width: '30px',\n            height: '30px',\n            backgroundColor: 'unset',\n            boxShadow: 'unset'\n          }}\n          aria-haspopup=\"true\"\n          onClick={e => {\n            e.stopPropagation();\n            setAnchorEl(e.currentTarget);\n          }}\n        >\n          <MoreVert style={{ color: '#4c4c4c', fontSize: '20px' }} />\n        </Fab>\n      ) : undefined}\n      <Menu\n        id={constants.cellMenu}\n        anchorEl={anchorEl}\n        closeMenu={() => setAnchorEl(undefined)}\n        menuItems={menuItems}\n      />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<{ level: number }>`\n  margin-left: ${p => `${p.level * 20}px`};\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n`;\n\nconst Text = styled.span<{ checkChildren: boolean }>`\n  margin-left: ${p => (p.checkChildren ? '0px' : '23px')};\n  width: 100%;\n  padding: 10px;\n  height: 100%;\n  white-space: nowrap;\n  overflow: hidden !important;\n  text-overflow: ellipsis;\n`;\n\nconst AmountChildren = styled.span`\n  font-weight: bold;\n  color: ${p => p.theme.colors.black};\n  padding-left: 10px;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useGlobal } from 'reactn';\nimport { Column } from 'react-table';\nimport styled from 'styled-components';\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa';\nimport ArrowRight from '@material-ui/icons/ArrowRight';\nimport ArrowLeft from '@material-ui/icons/ArrowLeft';\n\nimport { useHover } from '../../../hooks';\nimport { arrowStyle, foldIcon } from '../../../utils/styles';\nimport { IColumnProps } from '../../../types';\n\nexport default ({\n  title,\n  columnProps\n}: {\n  title: string;\n  columnProps: Column;\n}) => {\n  const [columns, setColumns] = useGlobal('columns');\n  const [, setFoldedColumn] = useGlobal('foldedColumn');\n  const [defaultWidths] = useGlobal('defaultColumnWidths');\n  const [sorted] = useGlobal('newSorted');\n  const [hoverRef, isHovered] = useHover(true);\n  const [hoverRefText, isHoveredText] = useHover();\n  const checkWidth =\n    hoverRefText.current &&\n    hoverRefText.current.offsetWidth < hoverRefText.current.scrollWidth;\n  const sortedColumn = sorted[0];\n  const checkId = sortedColumn && sortedColumn.id === columnProps.id;\n  const [folded, setFolded] = useState(false);\n  const [configColumn, setConfigColumn] = useState<IColumnProps>();\n\n  useEffect(() => {\n    if (!folded) {\n      const foldedColumn = columns.find(column => column.id === columnProps.id);\n      if (foldedColumn) {\n        setConfigColumn(foldedColumn);\n      }\n    }\n  }, [folded, columnProps.id, columns]);\n\n  return (\n    <Container ref={hoverRef}>\n      <FoldWrapper\n        folded={folded}\n        data-testid={`Fold_${columnProps.id}`}\n        onClick={e => {\n          const foldedId = { id: columnProps.id, folded: !folded };\n          e.stopPropagation();\n          setFolded(!folded);\n          setFoldedColumn(foldedId);\n\n          const foldedColumnsConfig = columns.map((column, index) => {\n            const defaultWidth = defaultWidths.find(\n              item => item.id === column.id\n            );\n            if (columnProps.id === column.id) {\n              // This if statement is for checking if column is clicked or not, if not just return the column\n              if (folded) {\n                // This if statement is for setting the fold props to the right column, otherwise the default config and its width is set back\n                return {\n                  ...configColumn,\n                  width: defaultWidth ? defaultWidth.width + 2 : 200 // the purpose of the +2 => it takes the full width of the table\n                };\n              }\n              return {\n                ...column,\n                width: 30,\n                sortable: false,\n                resizable: false,\n                ...(index === 0\n                  ? {\n                      Expander: () => <FoldedCell>...</FoldedCell>\n                    }\n                  : { Cell: () => '...' })\n              };\n            }\n            return column;\n          });\n          setColumns(foldedColumnsConfig);\n        }}\n      >\n        {folded ? (\n          <ArrowRight style={foldIcon} />\n        ) : (\n          <ArrowLeft style={foldIcon} />\n        )}\n      </FoldWrapper>\n      <TitleWrapper\n        ref={hoverRefText}\n        data-tip={checkWidth && isHoveredText ? title : ''}\n        sort={columnProps.sortable}\n      >\n        <Title>{title}</Title>\n      </TitleWrapper>\n      <SortDirection>\n        {checkId &&\n          (sortedColumn.desc ? (\n            <FaArrowDown style={arrowStyle} />\n          ) : (\n            <FaArrowUp style={arrowStyle} />\n          ))}\n        {isHovered && !checkId && <FaArrowUp style={arrowStyle} />}\n      </SortDirection>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst TitleWrapper = styled.span<{ sort?: boolean }>`\n  width: ${p => (p.sort ? 'calc(100% - 50px)' : '100%')};\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst FoldWrapper = styled.div<{ folded: boolean }>`\n  margin: ${p => (p.folded ? '0 5px' : '0 10px')};\n  margin-right: unset;\n  cursor: pointer;\n`;\n\nconst Title = styled.span`\n  display: inline;\n`;\n\nconst FoldedCell = styled.div`\n  padding: 7px 5px;\n`;\n\nconst SortDirection = styled.div`\n  width: 20px;\n  height: 20px;\n`;\n","import React from 'reactn';\nimport styled from 'styled-components';\nimport { CellInfo } from 'react-table';\n\nimport { useHover } from '../../../hooks';\n\nexport default ({ value }: { value: CellInfo['value'] }) => {\n  const [hoverRef, isHovered] = useHover();\n  const checkWidth =\n    hoverRef.current &&\n    hoverRef.current.offsetWidth < hoverRef.current.scrollWidth;\n\n  return (\n    <Wrapper\n      id=\"CellTextWrapper\"\n      data-tip={checkWidth && isHovered ? value : ''}\n      ref={hoverRef}\n    >\n      <span id=\"CellText\">{value}</span>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-top: 4px;\n`;\n","import React from 'react';\nimport { useGlobal } from 'reactn';\nimport { FaCheck } from 'react-icons/fa';\n\nimport { columnHeader } from '../../utils/styles';\nimport { countAllChildren } from '../../utils';\nimport { IColumnProps, IRowProps, ITableColumn } from '../../types';\nimport ExpanderCell from './subComponents/ExpanderCell.component';\nimport ColumnTitle from './subComponents/ColumnTitle.component';\nimport Cell from './subComponents/Cell.component';\nimport constants from '../../constants';\nimport { Column, CellInfo } from 'react-table';\n\n// these are the props for the expand column\nconst collapseColumn = (column: ITableColumn) => ({\n  expander: true,\n  sortable: true,\n  filterable: false,\n  accessor: column.name || '',\n  headerStyle: { ...columnHeader, marginLeft: 1 },\n  Header: (props: { column: Column }) => (\n    <ColumnTitle\n      title={column.display || column.name || ''}\n      columnProps={props.column}\n    />\n  ),\n  show: column.show,\n  id: constants.collapse,\n  minWidth: 250,\n  minResizeWidth: 250,\n  Expander: ({\n    isExpanded,\n    original\n  }: {\n    isExpanded: boolean;\n    original: IRowProps;\n  }) => {\n    const [selectedIds] = useGlobal('selectedIds');\n    const [allData] = useGlobal('data');\n\n    return (\n      <ExpanderCell\n        original={original}\n        isExpanded={isExpanded}\n        column={column}\n        count={countAllChildren({\n          uniqId: original.uniqId,\n          parentId: original.uniqId,\n          count: 0,\n          allData,\n          selectedIds\n        })}\n      />\n    );\n  }\n});\n\nconst isImported = 'isImported';\n\n// this is a function to turn the columns array into an array with the right props for the columns of react table\nexport const calcColumns = (columns: ITableColumn[]) => {\n  const filteredColumns = columns.filter(column => column.show);\n\n  const showColumns = filteredColumns.map(\n    (column, index): IColumnProps => {\n      // this is the first column in the table\n      if (index === 0) {\n        return collapseColumn(column);\n      }\n      // These are the normal column props\n      return {\n        Header: (props: { column: Column }) => (\n          <ColumnTitle\n            title={column.display || column.name || ''}\n            columnProps={props.column}\n          />\n        ),\n        accessor: column.name || '',\n        show: column.show,\n        minResizeWidth: 100,\n        headerStyle: columnHeader,\n        id: column.name || undefined,\n        sortable: true,\n        filterable: false,\n        minWidth: 100,\n        Cell: ({ value, original }: CellInfo) =>\n          column.name === isImported ? (\n            value && <FaCheck data-testid={`Import_${original.label}`} /> // this is the special cell for the import column\n          ) : (\n            <Cell value={value} />\n          )\n      };\n    }\n  );\n  return showColumns;\n};\n","import { addReducer } from 'reactn';\nimport { State } from 'reactn/default';\nimport { produce } from 'immer';\n\nimport { IRowProps, IResponseRoots, FilterTypes } from '../../types';\nimport {\n  cloning,\n  handleFetchError,\n  handleFetchResponse,\n  headerContent,\n  isFilterTypeText,\n  manipulateStringValuesToBooleans\n} from '../../utils';\nimport { baseUrlVisualization } from '../../utils/endpoints';\nimport { calcColumns } from '../../components/ui/ExtraColumns';\nimport { Dispatch } from 'react';\n\n// reducer to fetch the roots (makes use of a normalized state)\naddReducer('fetchRoots', async (global: State, dispatch: Dispatch<any>) => {\n  dispatch((global: State) => ({\n    ...global,\n    loading: true\n  }));\n\n  return fetch(\n    `${baseUrlVisualization}roots?configurationId=${global.configurationId}`,\n    {\n      method: 'post',\n      headers: headerContent,\n      body: JSON.stringify({\n        commonParameters: global.parameters,\n        filterParameters: Object.values(global.filters.rootFilters)\n      })\n    }\n  )\n    .then(handleFetchResponse)\n    .then(\n      ({\n        columns,\n        values,\n        visualizationMetadata,\n        filters\n      }: IResponseRoots) => ({\n        loadingRoots: false,\n        loading: false,\n        filters: {\n          ...global.filters,\n          hasEmptyRootsFilters: filters.length === 0,\n          rootFilters: filters.reduce(\n            (toggleColumnsConfig, column) => ({\n              ...toggleColumnsConfig,\n              [column.variable]: {\n                name: column.name,\n                query: column.query,\n                value:\n                  global.filters.rootFilters[column.variable]?.value ||\n                  undefined,\n                id: column.variable,\n                type: isFilterTypeText(column.type)\n                  ? FilterTypes.literal\n                  : FilterTypes.uri\n              }\n            }),\n            {}\n          )\n        },\n        columns:\n          Object.values(global.filters.rootFilters).length > 0\n            ? global.columns\n            : calcColumns(columns), // The columns only needs te be calculated the first time we load the app\n        enablePagination: visualizationMetadata.enablePagination,\n        title: visualizationMetadata.title,\n        subtitle: visualizationMetadata.subtitle,\n        data: manipulateStringValuesToBooleans(values).reduce(\n          (value, item: IRowProps, index) => {\n            const uniqId = `${item.uri}_${index + 1}`;\n            item = {\n              ...item,\n              children: [],\n              level: 0,\n              treeNodeId: `${index + 1}`,\n              uniqId\n            };\n            value[uniqId] = item;\n            return value;\n          },\n          {}\n        )\n      })\n    )\n    .catch((err: Error | Response) =>\n      handleFetchError(\n        err,\n        (error: Error) => ({\n          error,\n          loadingRoots: false,\n          loading: false\n        }),\n        (message: string) => ({\n          error: new Error(message),\n          loadingRoots: false,\n          loading: false\n        })\n      )\n    );\n});\n\n// reducer to fetch the children (makes also use of a normalized state)\naddReducer(\n  'fetchChildren',\n  (\n    global: State,\n    dispatch: Dispatch<any>,\n    notImporting: boolean,\n    origin: IRowProps,\n    level: number\n  ) =>\n    fetch(\n      `${baseUrlVisualization}children?configurationId=${global.configurationId}`,\n      {\n        method: 'post',\n        headers: headerContent,\n        body: JSON.stringify({\n          values: [cloning(origin)],\n          commonParameters: global.parameters\n        })\n      }\n    )\n      .then(handleFetchResponse)\n      .then(({ values }: { values: IResponseRoots['values'] }) => {\n        const updatedvalues = manipulateStringValuesToBooleans(values);\n\n        if (notImporting) {\n          return {\n            data: {\n              ...global.data,\n              ...updatedvalues.reduce(\n                (value, item: IRowProps, index: number) => {\n                  const uniqId = `${item.uri}_${origin.treeNodeId}.${\n                    index + 1\n                  }`;\n                  item = {\n                    ...item,\n                    children: []\n                  };\n                  value[uniqId] = item;\n                  item.level = level + 1;\n                  item.treeNodeId = `${origin.treeNodeId}.${index + 1}`;\n                  item.uniqId = uniqId;\n                  return value;\n                },\n                {}\n              ),\n              ...{\n                [origin.uniqId]: {\n                  ...global.data[origin.uniqId],\n                  children: updatedvalues.map(\n                    (item, index) =>\n                      `${item.uri}_${origin.treeNodeId}.${index + 1}`\n                  )\n                }\n              }\n            }\n          };\n        }\n\n        // After an import is done, this is gonna get called for updating all the uuids and parentuuids of the children\n        const allData = global.data;\n        updatedvalues.forEach(\n          (item, index) =>\n            (allData[`${item.uri}_${origin.treeNodeId}.${index + 1}`].uuid =\n              item.uuid)\n        );\n        updatedvalues.forEach(\n          (item, index) =>\n            (allData[\n              `${item.uri}_${origin.treeNodeId}.${index + 1}`\n            ].parentUuid = origin.uuid)\n        );\n        return produce(global, draftState => {\n          draftState.data = allData;\n        });\n      })\n      .catch((err: Error | Response) =>\n        handleFetchError(\n          err,\n          (error: Error) => ({ error }),\n          (message: string) => ({ error: new Error(message) })\n        )\n      )\n);\n","import React, { Dispatch } from 'react';\nimport { addReducer } from 'reactn';\n\nimport { IResponseRoots, IRowProps } from '../../types';\nimport {\n  cloning,\n  handleFetchError,\n  handleFetchResponse,\n  headerContent,\n  notify,\n  valueHasTreeNode\n} from '../../utils';\nimport { baseUrlImport, baseUrlVisualization } from '../../utils/endpoints';\nimport { State } from 'reactn/default';\nimport { produce } from 'immer';\nimport prop from 'lodash/fp/prop';\nimport { toast } from 'react-toastify';\n\nimport AlertActions from '../../components/ui/subComponents/AlertActions.component';\n\ntype Roots = Pick<IRowProps, 'uri' | 'uuid' | 'treeNodeId' | 'uniqId'>;\n\naddReducer(\n  'import',\n  async (\n    global: State,\n    dispatch: Dispatch<any>,\n    treeNode?: IRowProps['treeNodeId']\n  ) => {\n    const importValues = JSON.stringify({\n      values: global.selectedIds\n        .filter(id => valueHasTreeNode(id, treeNode))\n        .map(id => cloning({ ...global.data[id], isImported: false })),\n      commonParameters: global.parameters\n    });\n\n    dispatch((global: State) => ({\n      ...global,\n      loading: true\n    }));\n\n    return fetch(`${baseUrlImport}?configurationId=${global.configurationId}`, {\n      method: 'post',\n      headers: headerContent,\n      body: importValues\n    })\n      .then(handleFetchResponse)\n      .then(async response => {\n        const successSteps = response.map(prop('success'));\n        const error = successSteps.includes(false);\n\n        // this call is for retrieving the roots again so we can update the old uuids with the new ones -> so you can import them again\n        // and when you import them again it does not gonna add them to already imported items -> this was a bug\n        const roots = await fetch(\n          `${baseUrlVisualization}roots?configurationId=${global.configurationId}`,\n          {\n            method: 'post',\n            headers: headerContent,\n            body: JSON.stringify({\n              commonParameters: global.parameters,\n              filterParameters: Object.values(global.filters.rootFilters)\n            })\n          }\n        )\n          .then(handleFetchResponse)\n          .then(({ values }: { values: IResponseRoots['values'] }) =>\n            values.map((item: Roots, index) => ({\n              uuid: item.uuid,\n              uri: item.uri,\n              treeNodeId: `${index + 1}`,\n              uniqId: `${item.uri}_${index + 1}`\n            }))\n          )\n          .catch((): [] => []);\n\n        if (error) {\n          return {\n            ...global,\n            loading: false,\n            importSteps: response\n          };\n        }\n\n        if (roots.length === 0) {\n          notify(\n            `During the import, something wrong happened with the retrieval of the roots, please try again`\n          );\n          return {\n            ...global,\n            loading: false\n          };\n        }\n\n        // here we gonna update the store with the importSteps repsonse of what was successfull and update the data with the newly uuids\n        // The treeNode is added here for the import all functionality, it is for making sure only the selected items with its children is gonna be unselected and not all of them, same wise for the isImported key -> this was a bug\n        return produce(global, draftState => {\n          draftState.loading = false;\n          draftState.importSteps = response;\n          roots.forEach(item => {\n            draftState.data[item.uniqId].uuid = item.uuid;\n            draftState.data[item.uniqId].children.forEach(id => {\n              draftState.data[id].parentUuid = item.uuid;\n            });\n          });\n\n          if (treeNode) {\n            draftState.selectedIds = global.selectedIds.filter(\n              id => !valueHasTreeNode(id, treeNode)\n            );\n\n            global.selectedIds\n              .filter(id => valueHasTreeNode(id, treeNode))\n              .forEach(id => {\n                draftState.data[id].isImported = true;\n              });\n            return;\n          }\n          draftState.selectedIds = [];\n          global.selectedIds.forEach(id => {\n            draftState.data[id].isImported = true;\n          });\n        });\n      })\n      .catch((e: Error | Response) => {\n        handleFetchError(\n          e,\n          (error: Error) => {\n            notify(\n              `The import could not be started, please try again. Error message: ${error.message}`\n            );\n          },\n          (message: string) => {\n            notify(\n              'Query Execution Failed. Click Copy for details.',\n              undefined,\n              {\n                type: toast.TYPE.ERROR,\n                autoClose: false,\n                closeButton: <AlertActions errors={[message]} warnings={[]} />\n              }\n            );\n          }\n        );\n\n        return {\n          loading: false\n        };\n      });\n  }\n);\n","import { addReducer } from 'reactn';\nimport { State } from 'reactn/default';\nimport { Dispatch } from 'react';\nimport { produce } from 'immer';\n\nimport { FilterActions, FilterActionsTypes } from '../../types';\nimport {\n  handleFetchError,\n  handleFetchResponse,\n  headerContent,\n  notify\n} from '../../utils';\nimport { baseUrlFilterValues } from '../../utils/endpoints';\nimport constants from '../../constants';\n\naddReducer(\n  'handleFilter',\n  async (\n    global: State,\n    dispatch: Dispatch<any>,\n    action: FilterActionsTypes\n  ) => {\n    // This object is gonna look like this (if there are 3 roots for example)\n    // {0: false, 1: false, 2: false, 3: false}\n    // It is for resetting the expanded state of the roots so it is back to its default state with only the roots available\n    // When a filter is set active or not active anymore the roots data is gonna change, so the expanded needs to be too\n    const resetExpandedStateForRoots = Object.values(global.data)\n      .filter(item => item.level === 0)\n      .reduce(\n        (obj, item, index) => ({\n          ...obj,\n          [index]: false\n        }),\n        {}\n      );\n\n    switch (action.type) {\n      case FilterActions.clearActive:\n        return produce(global, draftState => {\n          draftState.filters.isFilterDialogOpen = false;\n          draftState.filters.areFiltersActive = false;\n          draftState.expandedRows = {\n            [constants.highestTreeLevel]: resetExpandedStateForRoots\n          };\n          draftState.filters.rootFilters = Object.values(\n            draftState.filters.rootFilters\n          ).reduce((obj, item) => {\n            item = {\n              ...item,\n              value: undefined\n            };\n            // @ts-ignore\n            obj[item.id] = item;\n            return obj;\n          }, {});\n        });\n\n      case FilterActions.setActive:\n        const entries = Object.entries(action.payload);\n\n        return produce(global, draftState => {\n          draftState.filters.areFiltersActive = true;\n          draftState.expandedRows = {\n            [constants.highestTreeLevel]: resetExpandedStateForRoots\n          };\n          draftState.filters.isFilterDialogOpen = false;\n          entries.forEach(item => {\n            draftState.filters.rootFilters[item[0]].value = item[1];\n          });\n        });\n      case FilterActions.open:\n        return produce(global, draftState => {\n          draftState.expandedRows = {\n            [constants.highestTreeLevel]: resetExpandedStateForRoots\n          };\n          draftState.filters.isFilterDialogOpen = true;\n          draftState.filters.areFiltersActive = false;\n        });\n      case FilterActions.close:\n        const areFilterValuesFilledIn = !Object.values(\n          global.filters.rootFilters\n        ).every(x => !x.value);\n\n        return produce(global, draftState => {\n          draftState.filters.isFilterDialogOpen = false;\n          if (areFilterValuesFilledIn) {\n            draftState.filters.areFiltersActive = true;\n          }\n        });\n      case FilterActions.picklistValues:\n        dispatch((global: State) =>\n          produce(global, draftState => {\n            draftState.filters.loadingPicklist = true;\n          })\n        );\n\n        const result = await fetch(\n          `${baseUrlFilterValues}?configurationId=${global.configurationId}&queryId=${action.payload.queryId}`,\n          {\n            method: 'get',\n            headers: headerContent\n          }\n        )\n          .then(handleFetchResponse)\n          .then((response: { [key: string]: string }[]) =>\n            produce(global, draftState => {\n              // sort filter values by value\n              const picklist = response\n                .sort((a, b) => {\n                  const itemA = a.value;\n                  const itemB = b.value;\n                  return itemA < itemB ? -1 : itemA > itemB ? 1 : 0;\n                })\n                .map(item => ({\n                  value: item.key,\n                  display: item.value\n                }));\n              draftState.filters.picklist = picklist;\n              draftState.filters.loadingPicklist = false;\n            })\n          )\n          .catch((err: Error | Response) => {\n            handleFetchError(\n              err,\n              (error: Error) => notify(`${error.message}, please try again.`),\n              (message: string) => notify(`${message}, please try again.`)\n            );\n\n            return produce(global, draftState => {\n              draftState.filters.loadingPicklist = false;\n            });\n          });\n        return result;\n      default:\n        return global;\n    }\n  }\n);\n","import { addReducer } from 'reactn';\nimport { Dispatch } from 'react';\nimport { State } from 'reactn/default';\nimport { produce } from 'immer';\nimport _union from 'lodash/union';\n\nimport { SelectActions, SelectActionsTypes } from '../../types';\nimport {\n  getChildren,\n  updateTreeDataWithAllChildren,\n  valueHasTreeNode\n} from '../../utils';\n\naddReducer(\n  'handleSelect',\n  async (\n    global: State,\n    dispatch: Dispatch<any>,\n    { type, payload: { item } }: SelectActionsTypes\n  ) => {\n    switch (type) {\n      case SelectActions.selectAll: {\n        dispatch((global: State) => ({\n          ...global,\n          loading: true\n        }));\n\n        // the children is an array that includes all the nested children for the provided row\n        // is't a deeply nested array\n        const children = await getChildren(item, global);\n        if (children.length === 0) {\n          dispatch((global: State) => ({\n            ...global,\n            loading: false\n          }));\n          return;\n        }\n        // the updatedData is a representative of the store data, this includes all the fetched children for correctly selecting the right items\n        const updatedData = updateTreeDataWithAllChildren(\n          children,\n          { ...global.data },\n          item.level,\n          item.uniqId\n        );\n\n        // here we gonna update the store with the newly update data and the newly selected items\n        // for the selected items, we gonna make sure the previous selected siblings stay selected\n        return produce(global, draftState => {\n          draftState.loading = false;\n          draftState.data = updatedData;\n          draftState.selectedIds = _union(\n            global.selectedIds,\n            Object.values(updatedData)\n              .filter(({ treeNodeId }) =>\n                treeNodeId.startsWith(item.treeNodeId)\n              )\n              .map(({ uniqId }) => uniqId)\n          );\n        });\n      }\n      case SelectActions.unselectAll:\n        // here we gonna update the store so that the selected items gonna be unselected for the provided parent row\n        return produce(global, draftState => {\n          draftState.selectedIds = global.selectedIds.filter(\n            id => !valueHasTreeNode(id, item.treeNodeId)\n          );\n        });\n      default:\n        return global;\n    }\n  }\n);\n","import { addReducer } from 'reactn';\nimport { State } from 'reactn/default';\nimport { Dispatch } from 'react';\nimport { produce } from 'immer';\n\nimport {\n  ExpandActionsTypes,\n  ExpandActions,\n  IResponseRoots,\n  IRowProps\n} from '../../types';\nimport { getChildren, updateTreeDataWithAllChildren } from '../../utils';\nimport constants from '../../constants';\n\n// this function is for determining the last number in a provided value\nconst getLastNumber = (value: string) =>\n  Number(value.substring(value.lastIndexOf('.') + 1)) - 1;\n\n// this function is to decide on which tree level the provided treeNode is located\n// level 0 (roots) = Root\nconst getTreeLevel = (treeNode: IRowProps['treeNodeId']) =>\n  treeNode.includes('.')\n    ? `${treeNode.substring(0, treeNode.lastIndexOf('.'))}`\n    : constants.highestTreeLevel;\n\n// this function is gonna update the expanded state\n// It is also a recursive one for expanding the children of children and so on ...\n// This is necessary for the expand all functionality\n// the expanded state looks like this for example\n// {\n// Root: {0: true, 1: false, 2: true},      -> expanded state of the roots (tree level 0)\n// 1: { 0: false, 1: true },                -> expanded state of the children of the 1st root (tree level 1)\n// 1.2: { 0: true },                        -> expanded state of the children of level 1 the 2th item (tree level 2)\n// 1.2.1: { 0: true, 1: false, 2: false },  -> expanded state of the children of level 2 the 1st item (tree level 3)\n// 1.2.1.1: { 0: false, 1: true },          -> expanded state of the children of level 3 the 1st item (tree level 4)\n// 3: { 0: false }                          -> expanded state of the children of the 3th root (tree level 1)\n// }\n\n// In react table, the expanded state look like this but it is only for one level deep\n// expanded={{ // The nested row indexes on the current page that should appear expanded\n//     1: true,\n//     4: true,\n//     5: {\n//       2: true,\n//       3: true\n//     }\n//   }}\n// this is the callback that is called when a change occurs for expanding\n// onExpandedChange={(newExpanded, index, event) => {...}} // Called when an expander is clicked\n// newExpanded is for example:\n// { 0: { } } -> for indicating that the first row is expanded\n// { 0: false } -> for indicating that the first row is collapsed\n// index is an array with only one item inside of it, it includes the index of the clicked row\n\n/**\n * Copies the content of the import messages.\n * Makes it easier to track in case of failure. And the user can mail the admin with the necessary info.\n */\n\nconst calcExpanded = (\n  children: IResponseRoots['values'],\n  expandedState: State['expandedRows'],\n  parentId?: string\n) => {\n  children.forEach((item, index) => {\n    if (item.children.length > 0) {\n      calcExpanded(item.children, expandedState);\n    }\n\n    // this is gonna update the expanded rows for each child\n    // Just to be sure there is a double check done that only rows can expanded who have children available\n    expandedState[getTreeLevel(item.treeNodeId)] = {\n      ...expandedState[getTreeLevel(item.treeNodeId)],\n      [index]: item.children.length > 0 && item.hasChildren\n    };\n\n    // this is gonna update the expanded rows for the parent\n    // First it is gonna determine on which level we are, because we can expand all on a nested child as well and than turn the expanded state to true for that row\n    // It is only gonna execute 1 time\n    if (parentId) {\n      expandedState[getTreeLevel(parentId)] = {\n        [parentId.length > 1\n          ? getLastNumber(parentId)\n          : Number(parentId) - 1]: true\n      };\n    }\n  });\n  return expandedState;\n};\n\naddReducer(\n  'handleExpand',\n  async (\n    global: State,\n    dispatch: Dispatch<any>,\n    action: ExpandActionsTypes\n  ) => {\n    switch (action.type) {\n      case ExpandActions.expandAll:\n        const {\n          payload: { item }\n        } = action;\n\n        dispatch((global: State) => ({\n          ...global,\n          loading: true\n        }));\n\n        // the children is an array here that includes all the nested children for the provided row\n        // is't a deeply nested array\n        const children = await getChildren(item, global);\n        if (children.length === 0) {\n          dispatch((global: State) => ({\n            ...global,\n            loading: false\n          }));\n          return;\n        }\n\n        // the updatedData is a representative of the store data, this includes all the fetched children for correctly selecting the right items\n        const updatedData = updateTreeDataWithAllChildren(\n          children,\n          { ...global.data },\n          item.level,\n          item.uniqId\n        );\n        // the updatedExpandedRows is a representative of the store expanded rows\n        const updatedExpandedRows = calcExpanded(\n          children,\n          { ...global.expandedRows },\n          item.treeNodeId\n        );\n\n        // here we gonna update the store with the newly update data and the expanded rows\n        return produce(global, draftState => {\n          draftState.loading = false;\n          draftState.data = updatedData;\n          draftState.expandedRows = updatedExpandedRows;\n        });\n      case ExpandActions.handleExpand:\n        const {\n          payload: { treeNode, index, newExpanded }\n        } = action;\n\n        return produce(global, draftState => {\n          const expandedTreeLevel = global.expandedRows[treeNode];\n\n          // This is gonna collapse the siblings of the clicked row -> for performance issues\n          // Is for when all children are expanded and you wanna collapse a row -> is gonna make sure the other ones dont collapse too\n          if (\n            Object.keys(expandedTreeLevel || {}).includes(`${index}`) &&\n            expandedTreeLevel[index]\n          ) {\n            draftState.expandedRows[treeNode] = newExpanded;\n            return;\n          }\n\n          draftState.expandedRows[treeNode] = {\n            [index]: Boolean(newExpanded[index]) // for the true state, react table returns an empty object so I wrapped it with Boolean\n          };\n        });\n      case ExpandActions.resetExpand:\n        return produce(global, draftState => {\n          draftState.expandedRows = {};\n        });\n      default:\n        return global;\n    }\n  }\n);\n","import React from 'reactn';\nimport styled from 'styled-components';\nimport { PulseLoader } from 'react-spinners';\nimport { colors } from '../../../utils/colors';\n\n// This is the component of the loader\nexport default ({\n  loading,\n  color = colors.blackOpacity\n}: {\n  loading: boolean;\n  color?: string;\n}) => (\n  <LoaderContainer data-testid=\"LoaderIcon\">\n    {loading ? (\n      <PulseLoader color={color} size={15} margin={'2px'} loading={loading} />\n    ) : undefined}\n  </LoaderContainer>\n);\nconst LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import React, { ReactNode, ReactPortal, useEffect } from 'react';\nimport { useGlobal } from 'reactn';\nimport classnames from 'classnames';\nimport styled from 'styled-components';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputBase from '@material-ui/core/InputBase';\n\nimport { paginationButton } from '../../../utils/styles';\nimport { IPagination } from '../../../types';\nimport { updateHeight, customId } from '../../../utils';\n\nconst defaultButton = (props: {\n  children: ReactNode | ReactPortal;\n  disabled: boolean;\n  [key: string]: unknown;\n}) => (\n  <IconButton type=\"button\" {...props} disabled={props.disabled}>\n    {props.children}\n  </IconButton>\n);\n\nexport default (props: IPagination) => {\n  const {\n    showPageSizeOptions,\n    pageSizeOptions,\n    pageSize,\n    data,\n    canPrevious,\n    canNextFromData,\n    onPageSizeChange,\n    className,\n    onPageChange,\n    style,\n    PreviousComponent = defaultButton,\n    NextComponent = defaultButton\n  } = props;\n  const [configurationId] = useGlobal('configurationId');\n\n  const getSafePage = (page: number) => {\n    if (isNaN(page)) {\n      page = props.page;\n    }\n    if (props.canNextFromData) {\n      return page;\n    }\n\n    return Math.min(Math.max(page, 0), props.pages - 1);\n  };\n\n  const changePage = (page: number) => {\n    page = getSafePage(page);\n    if (props.page !== page) {\n      onPageChange(page);\n    }\n  };\n\n  const canNext = canNextFromData\n    ? data && data.length === pageSize\n    : props.canNext;\n\n  const startAmount = props.page * pageSize + 1;\n  const showAmount =\n    props.page + 1 === props.pages ? data.length : (props.page + 1) * pageSize;\n  const total = data.length;\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    updateHeight(true, configurationId);\n  }, [pageSize]);\n\n  return (\n    <div\n      className={classnames(className, '-pagination')}\n      data-testid=\"PaginationFooter\"\n      id={customId('PaginationFooter', configurationId)}\n      style={{\n        ...style,\n        borderRadius: '0 0 15px 15px',\n        borderTop: 'unset'\n      }}\n    >\n      <WrapperPageSize>\n        {showPageSizeOptions && (\n          <PageSizeOptions className=\"select-wrap -pageSizeOptions\">\n            <TextPageSize>Rows per page</TextPageSize>\n            <FormControl>\n              <Select\n                value={pageSize}\n                onChange={e => onPageSizeChange(Number(e.target.value))}\n                input={<InputBase id=\"pageSize-select\" />}\n                style={{\n                  fontSize: 'small',\n                  paddingTop: '3px'\n                }}\n              >\n                {pageSizeOptions.map(option => (\n                  <MenuItem key={option} value={option}>\n                    {option}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </PageSizeOptions>\n        )}\n        <TextTotalRoots data-testid=\"TotalRoots\">{`${startAmount}-${showAmount} of ${total}`}</TextTotalRoots>\n      </WrapperPageSize>\n      <Wrapper disabled={!canPrevious}>\n        <PreviousComponent\n          onClick={() => {\n            if (!canPrevious) {\n              return;\n            }\n            changePage(0);\n          }}\n          disabled={!canPrevious}\n          style={paginationButton(canPrevious)}\n          data-testid=\"GoFirstPage\"\n        >\n          <FirstPage />\n        </PreviousComponent>\n        <PreviousComponent\n          onClick={() => {\n            if (!canPrevious) {\n              return;\n            }\n            changePage(props.page - 1);\n          }}\n          disabled={!canPrevious}\n          style={paginationButton(canPrevious)}\n          data-testid=\"GoPreviousPage\"\n        >\n          <ChevronLeft />\n        </PreviousComponent>\n      </Wrapper>\n      <Wrapper disabled={!canNext}>\n        <NextComponent\n          onClick={() => {\n            if (!canNext) {\n              return;\n            }\n            changePage(props.page + 1);\n          }}\n          disabled={!canNext}\n          style={paginationButton(canNext)}\n          data-testid=\"GoNextPage\"\n        >\n          <ChevronRight />\n        </NextComponent>\n        <NextComponent\n          onClick={() => {\n            if (!canNext) {\n              return;\n            }\n            changePage(props.pages);\n          }}\n          disabled={!canNext}\n          style={paginationButton(canNext)}\n          data-testid=\"GoLastPage\"\n        >\n          <LastPage />\n        </NextComponent>\n      </Wrapper>\n    </div>\n  );\n};\n\nconst Wrapper = styled.div<{ disabled: boolean }>`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  align-items: center;\n  margin-right: 10px;\n  cursor: ${p => (p.disabled ? 'not-allowed' : '')};\n`;\n\nconst TextTotalRoots = styled.span`\n  margin-left: 15px;\n`;\n\nconst TextPageSize = styled.span`\n  margin-right: 10px;\n`;\n\nconst WrapperPageSize = styled.div`\n  justify-content: flex-end;\n  margin-right: 15px;\n  flex: 15 1;\n  display: flex;\n  align-items: center;\n`;\n\nconst PageSizeOptions = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst CustomNoDataComponent = (props: { isLoading: boolean }) => {\n  if (props.isLoading) {\n    return null; // The property of React table requires a react element or null\n  }\n  return <Wrapper data-testid=\"NothingFound\">No results found</Wrapper>;\n};\n\nexport default CustomNoDataComponent;\n\nconst Wrapper = styled.div`\n  position: absolute;\n  color: ${p => p.theme.colors.blackOpacity};\n  pointer-events: none;\n  top: 45%;\n  left: 15px;\n  font-weight: bold;\n  font-size: medium;\n`;\n","import { useGlobal, useDispatch } from 'reactn';\nimport React, { useState, useEffect } from 'react';\n// you can find more information about react table in here: https://www.npmjs.com/package/react-table/v/6.10.0\nimport ReactTable, { Column, SortingRule, TableProps } from 'react-table';\nimport 'react-table/react-table.css';\nimport styled from 'styled-components';\nimport ReactTooltip from 'react-tooltip';\nimport './table.css';\n\nimport {\n  tableRow,\n  tableCells,\n  noBorder,\n  noOverflow,\n  resizerStyle\n} from '../../../utils/styles';\nimport { hasElementOverflown, customId } from '../../../utils';\nimport {\n  mouseEvent,\n  IRowProps,\n  ExpandActions,\n  CellProps\n} from '../../../types';\nimport constants from '../../../constants';\nimport Loader from '../subComponents/Loader.component';\nimport Pagination from '../subComponents/Pagination.component';\nimport CustomNoDataComponent from '../subComponents/CustomNoData.component';\nimport { colors } from '../../../utils/colors';\nimport { useWindowSize } from '../../../hooks';\n\n// This is the component of the table body (react-table)\nconst TableBody = ({\n  data,\n  isRoot,\n  treeNode\n}: {\n  data: IRowProps[];\n  isRoot: boolean;\n  treeNode: string;\n}) => {\n  const [foldedColumn] = useGlobal('foldedColumn');\n  const [, setDefaultWidths] = useGlobal('defaultColumnWidths');\n  const [sortedColumn, setSortedColumn] = useGlobal('newSorted');\n  const [columns, setColumns] = useGlobal('columns');\n  const [allData] = useGlobal('data');\n  const [selectedIds, setSelectedIds] = useGlobal('selectedIds');\n  const [pagination] = useGlobal('enablePagination');\n  const [configurationId] = useGlobal('configurationId');\n\n  const dataTestId = 'data-testid';\n  const tableBodyId =\n    document.getElementById(customId('TableBody', configurationId)) ||\n    undefined;\n\n  const [newColumns, setNewColumns] = useState<{ id: string; width: number }[]>(\n    []\n  );\n  const [resize, setResize] = useState(false);\n  const [checking, setChecking] = useState(!hasElementOverflown(tableBodyId));\n  const [pageChanged, setPageChanged] = useState(false);\n\n  const [expandedRows] = useGlobal('expandedRows');\n  const dispatchExpand = useDispatch('handleExpand');\n  const [, height] = useWindowSize();\n\n  // This useEffect is for resizing the columns\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    // This is for setting the default widths of the columns -> so when you cancel the folding of the column, it knows which width it needs to set back\n    if (!foldedColumn.folded) {\n      const defaultColumnWidths = columns.map(column => {\n        const headerId = document.getElementById(column.id || '');\n        const defaultColumn = headerId && headerId.getBoundingClientRect();\n\n        if (defaultColumn) {\n          return {\n            id: column.id,\n            width: defaultColumn.width\n          };\n        }\n        return {\n          id: column.id,\n          width: 250\n        };\n      });\n      setDefaultWidths(defaultColumnWidths);\n    }\n\n    setColumns([\n      ...columns\n        // @ts-ignore\n        .concat(newColumns)\n        .reduce(\n          (a: any, b: any) => a.set(b.id, Object.assign(a.get(b.id) || {}, b)),\n          new Map()\n        )\n        .values()\n    ]);\n    setResize(false);\n  }, [resize]);\n\n  // This is a function to handle the row click or handle the original\n  const cellProps = (rowInfo: CellProps, column: Column) => ({\n    onClick: (e: mouseEvent, handleOriginal: () => void) => {\n      // These are for checking which element is clicked\n      const { id } = e.target as HTMLButtonElement;\n      const hasExpandIconClicked = [\n        constants.containerExpander,\n        constants.iconExpand,\n        constants.iconExpandWrapper\n      ].includes(id);\n\n      if (id.length === 0) {\n        return;\n      }\n\n      // When a user clicks on the expand icon, it is gonna expand so you can see the children -> that is what the handleOriginal is gonna do\n      if (hasExpandIconClicked) {\n        handleOriginal();\n        return;\n      }\n\n      selectedIds.some(id => id === rowInfo.original.uniqId)\n        ? setSelectedIds(\n            selectedIds.filter(id => id !== rowInfo.original.uniqId)\n          )\n        : setSelectedIds(selectedIds.concat(rowInfo.original.uniqId));\n    },\n    style: tableCells(column.id || ''),\n    [dataTestId]: constants.tableCell,\n    id:\n      column.id === constants.collapse\n        ? constants.expandCell\n        : constants.tableCell\n  });\n\n  const sortingMethod = (newSorted: SortingRule[]) => {\n    const sorted = newSorted.length > 0 ? newSorted[0] : undefined;\n    const accessor = columns[0].accessor;\n    if (!!sorted && sorted.id === constants.collapse && !!accessor) {\n      data.sort((a, b) => {\n        const itemA = a[accessor];\n        const itemB = b[accessor];\n        return itemA < itemB ? -1 : itemA > itemB ? 1 : 0;\n      });\n    }\n    setSortedColumn(newSorted);\n    dispatchExpand({ type: ExpandActions.resetExpand });\n  };\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    setChecking(hasElementOverflown(tableBodyId));\n    setPageChanged(false);\n    ReactTooltip.rebuild();\n  }, [tableBodyId, pageChanged, height, foldedColumn]);\n\n  const getNoDataProps = (props: TableProps) => ({\n    loading: props.loading\n  });\n\n  return (\n    <Wrapper data-testid=\"TableBody\" root={isRoot}>\n      <ReactTooltip\n        multiline={true}\n        className=\"extraClass\"\n        overridePosition={(\n          { left, top },\n          currentEvent,\n          currentTarget,\n          node\n        ) => {\n          const d = document.documentElement;\n\n          left = Math.min(d.clientWidth - (node ? node.clientWidth : 0), left);\n          top = Math.min(d.clientHeight - (node ? node.clientHeight : 0), top);\n\n          left = Math.max(10, left);\n          top = Math.max(10, top);\n\n          return { top, left };\n        }}\n      />\n      <ReactTable\n        {...(isRoot\n          ? {\n              ...(pagination && { defaultPageSize: 10 }),\n              ...(!pagination && { pageSize: data.length }),\n              getTbodyProps: () => ({\n                style: {\n                  maxHeight: pagination\n                    ? `${height - 195}px` // (rounded on 185 -> 40 (padding) + 68 (header) + 43 (pagination) + 31 (for the column headers) + 10 (extra) = 192)\n                    : `${height - 155}px`, // (rounded on 145 -> 40 (padding) + 68 (header) + 31 (for the column headers) + 10 (extra) = 149)\n                  minHeight: '38px', // +- the height of one row\n                  overflowX: 'hidden'\n                },\n                id: customId('TableBody', configurationId)\n              })\n            }\n          : {\n              TheadComponent: () => null,\n              defaultPageSize: 1000,\n              getTbodyProps: () => ({\n                style: {\n                  minHeight: '30px', // +- the height of one row\n                  overflow: 'unset'\n                }\n              })\n            })} // This is for having a children table with no headers / There is a default page size for the roots\n        showPagination={pagination && isRoot}\n        getNoDataProps={getNoDataProps}\n        PaginationComponent={Pagination}\n        collapseOnDataChange={false}\n        collapseOnSortingChange={true}\n        pageSizeOptions={[1, 5, 10, 20, 50, 100, 1000]}\n        filterable={false}\n        resizable={true}\n        sortable={true}\n        multiSort={false}\n        SubComponent={({\n          // children component\n          original\n        }: {\n          original: IRowProps;\n        }) =>\n          original.children.length > 0 ? (\n            <TableBody\n              data={original.children.map(uri => allData[uri])}\n              isRoot={false}\n              treeNode={original.treeNodeId}\n            />\n          ) : original.hasChildren ? (\n            <Loader loading={true} />\n          ) : undefined\n        }\n        className=\"-highlight\"\n        data={data}\n        columns={columns}\n        NoDataComponent={CustomNoDataComponent}\n        minRows={1} // controls the minimum number of rows to display - default will be `pageSize`\n        getResizerProps={() => ({\n          style: resizerStyle\n        })}\n        getTrProps={(state: any, rowInfo: any) => ({\n          // This is for making it visible when a row is clicked\n          style: tableRow(\n            selectedIds.some(id =>\n              rowInfo && rowInfo.original\n                ? id === rowInfo.original.uniqId\n                : false\n            )\n          ),\n          [dataTestId]: `TableRow_${\n            rowInfo && rowInfo.original.uri.replace(/.*\\//, '')\n          }`\n        })}\n        getTheadThProps={(state, rowInfo, column) => ({\n          [dataTestId]: `TableHeader_${(column && column.id) || ''}`,\n          id: (column && column.id) || ''\n        })}\n        getTheadTrProps={() => ({\n          style: {\n            backgroundColor: colors.darkGrey,\n            ...(checking && {\n              paddingRight: '10px'\n            })\n          }\n        })}\n        getTdProps={(state: any, rowInfo: any, column: any) =>\n          cellProps(rowInfo, column)\n        }\n        getTableProps={() => (isRoot ? {} : { style: noOverflow })}\n        getProps={() => ({ style: noBorder })}\n        getTrGroupProps={() => ({ style: noBorder })}\n        expanderDefaults={{\n          sortable: true,\n          resizable: true,\n          filterable: false\n        }}\n        resized={\n          foldedColumn.folded\n            ? []\n            : newColumns.map(({ width: value, ...rest }) => ({\n                value,\n                ...rest\n              })) // I need to add the empty array if a column is folded, because there was a bug with the resizing that it takes not the previous width\n        }\n        onResizedChange={(newResized, event) => {\n          setNewColumns(\n            newResized.map(({ value: width, ...rest }) => ({\n              width,\n              ...rest\n            }))\n          );\n          setResize(true);\n        }}\n        sorted={sortedColumn}\n        expanded={expandedRows[`${treeNode}`]}\n        onSortedChange={sortingMethod}\n        onExpandedChange={(newExpanded, index) => {\n          dispatchExpand({\n            type: ExpandActions.handleExpand,\n            payload: {\n              treeNode,\n              newExpanded,\n              index: index[0]\n            }\n          });\n        }}\n        onPageSizeChange={() => setPageChanged(true)}\n      />\n    </Wrapper>\n  );\n};\n\nexport default TableBody;\n\nconst Wrapper = styled.div<{ root: boolean }>`\n  text-align: center;\n  border-radius: 0 0 10px 10px;\n  box-shadow: ${p =>\n    p.root\n      ? '0px 1px 5px 0px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12)'\n      : 'unset'};\n`;\n","import React, { useState } from 'react';\nimport {\n  TextField as MTextField,\n  TextFieldProps as MTextFieldProps,\n  Button as MButton,\n  ButtonProps as MButtonProps,\n  IconButton as MIconButton,\n  IconButtonProps as MIconButtonProps,\n  CircularProgress\n} from '@material-ui/core';\nimport _noop from 'lodash/noop';\nimport {\n  Autocomplete as MAutocomplete,\n  AutocompleteProps as MAutocompleteProps,\n  UseAutocompleteSingleProps\n} from '@material-ui/lab';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { buttonStyle } from '../../../utils/styles';\n\nexport const classes = makeStyles(theme => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  option: {\n    fontSize: 15,\n    border: '1px solid rgba(27,31,35,.15)',\n    boxShadow: '0 3px 12px rgba(27,31,35,.15)',\n    borderRadius: 5,\n    minHeight: 'auto',\n    alignItems: 'flex-start',\n    padding: 8,\n    '& > span': {\n      marginRight: 10,\n      fontSize: 18\n    }\n  },\n  listbox: {\n    padding: 10\n  },\n  paper: {\n    padding: 10,\n    border: '1px solid rgb(76, 76, 76, 0.5)'\n  }\n}));\n\ntype TextFieldProps = Pick<\n  MTextFieldProps,\n  | 'label'\n  | 'id'\n  | 'required'\n  | 'disabled'\n  | 'InputProps'\n  | 'value'\n  | 'defaultValue'\n  | 'autoFocus'\n  | 'onChange'\n  | 'onBlur'\n  | 'error'\n  | 'inputRef'\n  | 'multiline'\n  | 'rows'\n  | 'rowsMax'\n  | 'size'\n  | 'name'\n  | 'onKeyPress'\n>;\n\nexport const TextField = ({\n  required = false,\n  disabled = false,\n  InputProps = {},\n  ...props\n}: TextFieldProps) => (\n  <MTextField\n    {...props}\n    required={required}\n    disabled={disabled}\n    label={props.label}\n    value={props.value}\n    defaultValue={props.defaultValue}\n    fullWidth={true}\n    autoFocus={false}\n    InputProps={InputProps}\n    onBlur={props.onBlur}\n    variant=\"outlined\"\n    margin=\"dense\"\n    onChange={props.onChange}\n    onKeyPress={props.onKeyPress}\n  />\n);\n\ntype Props<T> = {\n  label?: string;\n  required?: boolean;\n} & Omit<MAutocompleteProps<T>, 'renderInput'> &\n  UseAutocompleteSingleProps<T>;\n\ntype AutocompleteProps = Pick<\n  Props<{ value: string; display: string }>,\n  | 'onChange'\n  | 'options'\n  | 'loading'\n  | 'disabled'\n  | 'onOpen'\n  | 'value'\n  | 'defaultValue'\n  | 'id'\n  | 'label'\n  | 'required'\n  | 'style'\n  | 'noOptionsText'\n>;\n\nexport const Autocomplete = ({\n  loading = false,\n  disabled = false,\n  onOpen = _noop,\n  noOptionsText = 'Nothing found',\n  style = { width: '100%' },\n  ...props\n}: AutocompleteProps) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <MAutocomplete\n      {...props}\n      classes={classes()}\n      disabled={disabled}\n      id={props.id}\n      loading={loading}\n      open={open}\n      value={props.value}\n      onOpen={e => {\n        setOpen(true);\n        onOpen(e);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      style={style}\n      noOptionsText={noOptionsText}\n      getOptionLabel={option => option.display}\n      renderOption={option => option.display}\n      renderInput={params => (\n        <TextField\n          {...params}\n          label={props.label}\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            )\n          }}\n        />\n      )}\n      options={props.options}\n      onChange={props.onChange}\n    />\n  );\n};\n\ntype ButtonProps = Pick<\n  MButtonProps,\n  'children' | 'onClick' | 'style' | 'disabled' | 'id' | 'type' | 'form'\n>;\n\nexport const Button = ({ onClick = _noop, ...props }: ButtonProps) => (\n  <MButton\n    {...props}\n    variant=\"contained\"\n    size=\"medium\"\n    type={props.type}\n    form={props.form}\n    onClick={event => {\n      onClick(event);\n    }}\n    style={props.style}\n    disabled={props.disabled}\n  >\n    {props.children}\n  </MButton>\n);\n\ntype IconButtonProps = Pick<\n  MIconButtonProps,\n  'children' | 'onClick' | 'disabled'\n>;\n\nexport const IconButton = ({\n  onClick = _noop,\n  disabled = false,\n  ...props\n}: IconButtonProps) => (\n  <MIconButton\n    {...props}\n    onClick={event => {\n      onClick(event);\n    }}\n    style={buttonStyle(disabled)}\n    disabled={disabled}\n  >\n    {props.children}\n  </MIconButton>\n);\n","import React, { useGlobal, useDispatch } from 'reactn';\nimport styled from 'styled-components';\nimport CloudDownload from '@material-ui/icons/CloudDownload';\nimport { FaFilter } from 'react-icons/fa';\nimport { GoX } from 'react-icons/go';\n// The backdrop is gonna let the user know that the app is in a loading state, it is also for making sure the user waits for this to finish before he do something else\nimport Backdrop from '@material-ui/core/Backdrop';\n\nimport {\n  IconButton,\n  classes\n} from './subComponents/CustomComponents.components';\nimport Loader from '../ui/subComponents/Loader.component';\nimport { FilterActions } from '../../types';\nimport { colors } from '../../utils/colors';\n\n// This is the component of the Table header\nexport default () => {\n  const customStyle = classes();\n  const startImport = useDispatch('import');\n  const [selectedIds] = useGlobal('selectedIds');\n  const [loading] = useGlobal('loading');\n  const [title] = useGlobal('title');\n  const [subtitle] = useGlobal('subtitle');\n  const [{ hasEmptyRootsFilters, areFiltersActive, rootFilters }] = useGlobal(\n    'filters'\n  );\n  const hasSelectedIds = selectedIds.length === 0;\n  const dispatch = useDispatch('handleFilter');\n\n  return (\n    <Container>\n      <LeftContainer>\n        <Title data-testid=\"title\">{title}</Title>\n        {subtitle && <Subtitle data-testid=\"subtitle\">{subtitle}</Subtitle>}\n      </LeftContainer>\n      <Backdrop className={customStyle.backdrop} open={loading}>\n        <Loader loading={loading} color={colors.white} />\n      </Backdrop>\n      <RightContainer>\n        <IconButtonWrapper\n          data-tip={\n            hasSelectedIds\n              ? 'Please select an item by clicking in a row.'\n              : 'Import selected items'\n          }\n        >\n          <IconButton\n            onClick={() => {\n              startImport();\n            }}\n            disabled={hasSelectedIds || loading}\n            data-testid=\"ImportButton\"\n          >\n            <CloudDownload\n              style={{\n                fontSize: 'larger',\n                marginTop: '-4px'\n              }}\n            />\n          </IconButton>\n        </IconButtonWrapper>\n        <IconButtonWrapper\n          data-tip={\n            hasEmptyRootsFilters\n              ? 'There are no filters provided'\n              : 'Open filter screen'\n          }\n        >\n          <IconButton\n            onClick={() => {\n              dispatch({ type: FilterActions.open });\n            }}\n            disabled={hasEmptyRootsFilters}\n            data-testid=\"FilterButton\"\n          >\n            <FaFilter style={{ fontSize: 'large' }} />\n          </IconButton>\n        </IconButtonWrapper>\n        <IconButtonWrapper\n          data-tip={\n            !areFiltersActive\n              ? 'There are no active filters'\n              : 'Clear active filters'\n          }\n        >\n          <IconButton\n            onClick={() => {\n              dispatch({ type: FilterActions.clearActive });\n            }}\n            disabled={\n              hasEmptyRootsFilters\n                ? hasEmptyRootsFilters\n                : Object.values(rootFilters).every(x => !x.value)\n            }\n            data-testid=\"ClearActiveFiltersButton\"\n          >\n            <FaFilter style={{ fontSize: 'large', marginRight: '5px' }} />\n            <GoX\n              style={{\n                marginTop: '4px',\n                marginLeft: '8px',\n                fontSize: 'small',\n                position: 'absolute'\n              }}\n            />\n          </IconButton>\n        </IconButtonWrapper>\n      </RightContainer>\n    </Container>\n  );\n};\n\nconst Container = styled.header`\n  display: flex;\n  flex-direction: row;\n  padding: 15px;\n  justify-content: space-between;\n  position: relative;\n  background-color: ${p => p.theme.colors.greyOpacity};\n  border-radius: 10px 10px 0 0;\n  height: 80px;\n`;\n\nconst Title = styled.h3`\n  color: ${p => p.theme.colors.blackOpacity};\n  text-transform: uppercase;\n  font-size: initial;\n  margin-block-start: 0.5em;\n  margin-block-end: 0.5em;\n`;\n\nconst Subtitle = styled.div`\n  color: ${p => p.theme.colors.blackOpacity};\n`;\n\nconst IconButtonWrapper = styled.div`\n  margin-left: 10px;\n`;\n\nconst LeftContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-self: center;\n  text-align: left;\n`;\n\nconst RightContainer = styled.div`\n  display: flex;\n  align-self: center;\n  text-align: left;\n`;\n","import React, { useEffect } from 'react';\nimport { useGlobal, useDispatch } from 'reactn';\nimport 'react-table/react-table.css';\nimport styled from 'styled-components';\n\nimport TableBody from './subComponents/TableBody.component';\nimport TableHeader from './TableHeader.component';\nimport { importAlerts, updateHeight } from '../../utils';\nimport { IRowProps } from '../../types';\nimport constants from '../../constants';\nimport prop from 'lodash/fp/prop';\n\n// This is the component of the Table\nexport default ({ data }: { data: { [key: string]: IRowProps } }) => {\n  const fetchChildren = useDispatch('fetchChildren');\n  const [error] = useGlobal('error');\n  const [importSteps] = useGlobal('importSteps');\n  const [allData] = useGlobal('data');\n  const [pagination] = useGlobal('enablePagination');\n  const [configurationId] = useGlobal('configurationId');\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    // This is just for the initialization to adjust the iframe's height\n    updateHeight(pagination, configurationId);\n\n    importAlerts(importSteps);\n    const successSteps = importSteps.map(prop('success'));\n    const hasImportFailed =\n      !successSteps.includes(false) && importSteps.length !== 0;\n    if (hasImportFailed) {\n      Object.keys(allData).forEach(item => {\n        const rowData = allData[item];\n        if (rowData.children.length > 0) {\n          fetchChildren(false, rowData, 0);\n        }\n      });\n    }\n    return;\n  }, [importSteps]); // Update uuids en parentuuids of the data\n\n  const initialData = React.useMemo(\n    () => Object.values(data).filter(item => item.level === 0),\n    [data, importSteps]\n  );\n\n  return (\n    <Container>\n      {error.name !== '' && error.message !== '' ? (\n        <div>\n            <h4 data-testid=\"TableError\">\n              Something went wrong with fetching the data, please reload and try\n              again!\n            </h4>\n            <p>\n                Should this error persist, please make sure the configuration is valid and active, and configured to be used by the current host application.\n            </p>\n        </div>\n      ) : (\n        <React.Fragment>\n          <TableHeader />\n          <TableBody\n            data={initialData}\n            isRoot={true}\n            treeNode={constants.highestTreeLevel}\n          />\n        </React.Fragment>\n      )}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  text-align: center;\n  margin: auto;\n  border-radius: 10px;\n  border: ${p => `1px solid ${p.theme.colors.blackOpacityBorder}`};\n`;\n","import { useGlobal, useDispatch } from 'reactn';\nimport React from 'react';\nimport styled from 'styled-components';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { FilterActions, FilterTypes } from '../../../types';\nimport { TextField, Autocomplete, Button } from './CustomComponents.components';\n\nexport default () => {\n  const [filters] = useGlobal('filters');\n  const dispatch = useDispatch('handleFilter');\n\n  const [updatedFilterValues, setUpdatedFilterValues] = React.useState({});\n\n  const handleSubmit = (e: React.FormEvent | React.KeyboardEvent) => {\n    e.preventDefault();\n    dispatch({\n      type: FilterActions.setActive,\n      payload: updatedFilterValues\n    });\n  };\n\n  return (\n    <Dialog\n      fullWidth={true}\n      open={filters.isFilterDialogOpen}\n      onClose={() => {\n        dispatch({ type: FilterActions.close });\n      }}\n    >\n      <DialogTitle data-testid=\"FilterTitle\">Filter options</DialogTitle>\n      <DialogContent\n        style={{\n          overflowY: 'unset'\n        }}\n      >\n        <DialogForm id=\"filter-add-on\" onSubmit={handleSubmit}>\n          {Object.values(filters.rootFilters).map(filter => {\n            const pickedFilterQuery =\n              filters.picklist.find(\n                queryFilter => queryFilter.value === filter.value\n              ) || undefined;\n\n            if (filter.type === FilterTypes.literal) {\n              return (\n                <TextField\n                  key={filter.id}\n                  label={filter.name}\n                  id={`Filter_${filter.id}`}\n                  defaultValue={filter.value}\n                  onChange={e => {\n                    setUpdatedFilterValues({\n                      ...updatedFilterValues,\n                      [filter.id]: e.target.value\n                    });\n                  }}\n                  onKeyPress={e => {\n                    if (e.key === 'Enter') {\n                      handleSubmit(e);\n                    }\n                  }}\n                />\n              );\n            }\n            return (\n              <Autocomplete\n                key={filter.id}\n                id=\"SPARQL filter\"\n                label={filter.name}\n                loading={filters.loadingPicklist}\n                defaultValue={pickedFilterQuery}\n                onOpen={() => {\n                  dispatch({\n                    type: FilterActions.picklistValues,\n                    payload: { queryId: filter.query }\n                  });\n                }}\n                options={filters.picklist}\n                onChange={(event, value) => {\n                  setUpdatedFilterValues({\n                    ...updatedFilterValues,\n                    [filter.id]: value?.value\n                  });\n                }}\n              />\n            );\n          })}\n        </DialogForm>\n      </DialogContent>\n      <DialogActions\n        style={{\n          justifyContent: 'center',\n          paddingBottom: '16px'\n        }}\n      >\n        <Button\n          data-testid=\"AddFilterButton\"\n          type=\"submit\"\n          form=\"filter-add-on\"\n          id=\"FilterDialog_Apply\"\n        >\n          Apply Filters\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst DialogForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n`;\n","import React, { useGlobal, useDispatch } from 'reactn';\nimport { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { css } from 'glamor';\n\nimport Table from './ui/Table.component';\nimport Loader from '../components/ui/subComponents/Loader.component';\nimport { getUrlDecodedConfigurationId } from '../utils';\nimport AlertActions from '../components/ui/subComponents/AlertActions.component';\nimport FilterDialog from '../components/ui/subComponents/FilterDialog.component';\n\n// This is the main component\nexport default () => {\n  const fetchRoots = useDispatch('fetchRoots');\n  const [loadingRoots] = useGlobal('loadingRoots');\n  const [, setConfigurationId] = useGlobal('configurationId');\n  const [data] = useGlobal('data');\n  const [, setParameters] = useGlobal('parameters');\n  const [{ areFiltersActive }] = useGlobal('filters');\n\n  const areParamsAvailable = window.location.href.includes('params');\n  const decodedParameters = atob(getUrlDecodedConfigurationId('params'));\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    setConfigurationId(getUrlDecodedConfigurationId('configurationId'));\n    setParameters(areParamsAvailable ? JSON.parse(decodedParameters) : []);\n  }, []); // set the configurationId\n\n  useEffect(() => {\n    fetchRoots();\n  }, [fetchRoots, areFiltersActive]); // set the root data\n\n  return (\n    <Container>\n      {loadingRoots ? <Loader loading={loadingRoots} /> : <Table data={data} />}\n      <ToastContainer\n        hideProgressBar={true}\n        draggable={false}\n        pauseOnHover={false}\n        pauseOnFocusLoss={false}\n        position={toast.POSITION.TOP_LEFT}\n        closeOnClick={false}\n        bodyClassName={css({ width: '90%' })}\n        closeButton={<AlertActions />}\n      />\n      <FilterDialog />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  user-select: auto;\n  padding: 15px;\n  color: ${p => p.theme.colors.black};\n  margin: auto;\n  font-size: smaller;\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n`;\n","import React, { setGlobal } from 'reactn';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './reducers';\n\nimport App from './components/App.component';\nimport { colors } from './utils/colors';\nimport { State } from 'reactn/default';\n\n// global initial state\nexport const defaultInitialState: State = {\n  columns: [],\n  error: { name: '', message: '' },\n  selectedIds: [],\n  loadingRoots: true,\n  configurationId: '',\n  data: {},\n  search: '',\n  importSteps: [],\n  loading: false,\n  newSorted: [],\n  parameters: [],\n  enablePagination: true,\n  title: '',\n  subtitle:'',\n  foldedColumn: { id: undefined, folded: false },\n  expandedRows: {},\n  defaultColumnWidths: [],\n  filters: {\n    areFiltersActive: false,\n    rootFilters: {},\n    loadingPicklist: false,\n    picklist: [],\n    isFilterDialogOpen: false,\n    hasEmptyRootsFilters: false\n  }\n};\n\nconst theme = {\n  colors\n};\n\ntype ThemeInterface = typeof theme;\n\n// tslint:disable:interface-name\ndeclare module 'styled-components' {\n  interface DefaultTheme extends ThemeInterface {}\n}\n\n// set the global default state of the application\nsetGlobal(defaultInitialState);\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <>\n      <CssBaseline />\n      <App />\n    </>\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}